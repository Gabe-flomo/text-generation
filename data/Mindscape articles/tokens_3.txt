
are some problems for which very hard to find the answer but very easy to check the answer if 
gives it to you at least we think there are such problems whether or not they really exist is 
famous p vs np problem and actually proving it will win you a million dollars this kind of question 
under the rubric of complexity which formalizes how hard it is to computationally attack a wellposed problem scott aaronson 
one of the leading thinkers in computational complexity especially the wrinkles that enter once we consider quantum computers as 
as classical ones we talk about how we quantify complexity and how that relates to ideas as disparate as 
knowledge vs proof and what all this has to do with black holes and quantum gravity support mindscape on 
scott aaronson received his phd in computer science from the university of california berkeley he is currently the david 
bruton jr centennial professor of computer science at the university of texas at austin and director of the quantum 
center there he specializes in quantum computing and computational complexity theory but has written on topics from free will 
the nature of consciousness among his awards are the tomassonichisesi prize in physics italy and the alan t waterman 
from the national science foundation his blog shtetloptimized is known both for its humor and as the most reliable 
of information on news in quantum computing he is the author of quantum computing since democritus web siteshtetloptimized bloguniversity 
texas web pagegoogle scholar publicationswikipediaamazoncom author pagetalk at tedxcaltech click to show episode transcript click above to close there 
some problems for which very hard to find the answer but very easy to check the answer if someone 
it to you at least we think there are such problems whether or not they really exist is the 
p vs np problem and actually proving it will win you a million dollars this kind of question falls 
the rubric of complexity which formalizes how hard it is to computationally attack a wellposed problem scott aaronson is 
of the leading thinkers in computational complexity especially the wrinkles that enter once we consider quantum computers as well 
classical ones we talk about how we quantify complexity and how that relates to ideas as disparate as creativity 
vs proof and what all this has to do with black holes and quantum gravity support mindscape on patreon 
aaronson received his phd in computer science from the university of california berkeley he is currently the david j 
jr centennial professor of computer science at the university of texas at austin and director of the quantum information 
there he specializes in quantum computing and computational complexity theory but has written on topics from free will to 
nature of consciousness among his awards are the tomassonichisesi prize in physics italy and the alan t waterman award 
the national science foundation his blog shtetloptimized is known both for its humor and as the most reliable source 
information on news in quantum computing he is the author of quantum computing since democritus click to show episode 
sean carroll hello everyone welcome to the mindscape podcast your host sean carroll here is a question of interest 
hard is it to solve a problem that seems like a very important question right especially when faced with 
sorts of very difficult problems socially biologically planetarilly and so forth but also a very hard question to answer 
itself right what do you mean how hard it is what kind of problems are you talking about happily 
scientists have a very specific field of problems a specific kind of problems and they care a lot about 
hard they are to solve there is a whole field of endeavor called theoretical computer science you can be 
worldleading theoretical computer scientist and never actually program a computer although guest is not in that category sc one 
the things that theoretical computer scientists worry about is if you have a certain kind of problem like sorting 
list into alphabetical order how many steps does your computer program have to take to solve that problem and 
do the number of steps depend on the size of the list this is the problem known as computational 
and guest scott aaronson is one of the experts in this field in fact i feel bad even about 
this scott is a computer scientist at the university of texas at austin who is not only one of 
experts in theoretical computer science and computational complexity but seems to be the expert in many different fields so 
going to dive into things like p versus np this is a famous problem about whether or not a 
that is easy to check the solution for is also easy to solve almost no one thinks true yet 
turns out to be really really hard to show it sc going to go into quantum complexity theory which 
gets you into the question of if you built a quantum computer would it be able to speed up 
problems that we know about like factoring large numbers as scott will tell us many of the claims you 
have heard about the potential for quantum computers speeding things up tend to be a little bit exaggerated there 
are speedups available but maybe not as many as heard about sc and on the on other hand had 
real difficulty improving any of these results a long list of things that we believe are true and yet 
a very fruitful area to go in for a young person who really wants to make a mark on 
new and emerging field but also once you get into quantum mechanics going to become interested in things like 
gravity right who could possibly avoid that so with scott i talked about black holes and the holographic principle 
complementarity and how somehow gotten quantum information into the game of trying to understand the fundamental makeup of the 
scott is a longterm friend of mine a collaborator on fun papers and favorite goto guy when you talk 
these issues and if you listen to this podcast you will find out why sc if you know let 
remind you that here during our lockdown as long as still going on doing a set of weekly videos 
the biggest ideas in the universe right now about ten videos in and in the middle of a pretty 
couple of weeks trying to understand quantum field theory feynman diagrams stuff like that no mathematical background presumed but 
have to be willing to go along with me on some pretty heady ideas so check those out on 
just go to youtube and search for my name or biggest ideas in the universe going to be getting 
some even bigger ideas the ideas just getting bigger and bigger what going to do so we done gravity 
quantum gravity yet but believe me we will get there before too long i hope enjoying them i hope 
everyone is staying healthy and sane and safe during this weird situation in and go music sc scott aaronson 
to the mindscape podcast scott aaronson thanks great to be here sc you know i recently became an external 
at the santa fe institute and their focus is complexity studies and i remember back in the this used 
be a huge thing defining what a complex system actually was and it took me a while to catch 
that people like you have a way of using the word complexity that have anything to do with any 
the complex systems that talking about so what do you mean when you talk about complexity sa yeah an 
term right the definition of complexity is complex chuckle one of these selfdescribing words like shorts are short okay 
in theoretical computer science what people mean by complexity say by computational complexity is the resources that are needed 
solve some problem and specifically what we care about is the scaling of the resources so the most common 
that you might worry about are how much time does your program take and how much memory does it 
time and space those are pretty fundamental sa you could worry about other things also like how many random 
do you need how many parallel processors do you need do you need a quantum computer the physical substrate 
your computer how many qubits how many classical bits but not so interested in just giving answers like i 
solve problems of size one thousand using of ram say and solve problems of size two thousand using because 
of like great but tomorrow someone might have a slightly better idea and then just cut that number by 
factor of or i mean these numbers not fundamental features of the universe or of math they depend enormously 
details of what machine using of course the faster computer will be able to do the same thing but 
and so forth sa what we really care about is how are the resources like time or memory growing 
you go to larger and larger problem sizes so for example if i ask you to tell me whether 
number is prime or composite then we could say the input size is just the length of the number 
many digits it takes to write it down and what we really like is to have an algorithm to 
that kind of problem that use resources the time and memory that grow only like the size of the 
raised to some fixed power okay so the number of digits cubed or something actually stateoftheart algorithms for primality 
about how much time they do use okay sc okay sa what we want is an algorithm that uses 
that grow exponentially with the size of the problem and the i have this whole minilecture about explaining exponential 
but i feel like in the age of coronavirus that might not even be necessary and now maybe if 
is one good thing to come out of this maybe people now understand it that sc better understanding of 
sure sa yeah exactly that an well by the time at problems of size one thousand or numbers that 
be talking longer than the age of the universe to solve it even if you had every atom in 
observable universe working on your problem in parallel sc so if something is exponentially hard then we say really 
hard and if only polynomially hard then we say easy sa exactly yeah so in practice this tends to 
the dividing line that we focus on is your problem solvable by some algorithm that has only polynomial scaling 
does every possible algorithm require exponential scaling now there are intermediate possibilities there are functions that grow faster than 
and slower than exponential there and of course even among polynomials if it grew the problem size to the 
thousand power well technically polynomial but not very good sa but in practice usually if you can solve your 
by some method with oh sorry by some algorithm with polynomial scaling then usually if you put enough effort 
it if you care enough that problem size to the one hundred can become problem size to the can 
problem size to the three or to the whereas if every algorithm you can find has exponential scaling then 
of saying that you know anything better than some brute force approach that involves just trying every possible answer 
some astronomically large space of possibilities if got a polynomial yeah sc so it seems to me that a 
of the bread and butter of a working complexity theorist in your sense and the theoretical computer science sense 
the best existing algorithm takes end bits and solves the problem in n to the power steps but i 
find an algorithm that does it in n to the power steps so now the winner sa yeah that 
certainly a game that people play or even to improve n to the to n to the divided by 
log of n or something like that a little bit looked down upon just shaving logs off sc okay 
but yeah so basically we want to know for various important problems by important problems like say multiplying numbers 
matrices telling whether a number is prime deciding the truth or falsehood of a sentence in mathematical logic or 
scheduling airline flights not that anyone is doing that right now but figuring out how a protein will fold 
might fight the coronavirus or something where the size of the input would be the number of bases the 
of amino acids in the protein sa so these are all the sorts of problems that people might care 
and you want to know what is the inherent difficulty of each one so in a way that does 
depend on the details of are you using a mac or a pc but that really just ultimately depends 
what are the laws of physics that underlie your computer and so on the one hand that means finding 
fastest algorithm that you can but on the other hand that also means trying to rule out that you 
do any better than some limit so trying to prove that some algorithm is the best one now that 
a lot harder a lot harder to prove a negative than to prove that nothing can solve some problem 
to just find a way to solve it but often what we can do is that we can at 
pass the blame to someone else sc what does that mean sa in the following sense so say that 
best algorithm is n to the and say that you work on it and work on it for months 
months and you just cannot get it down to n to the okay so you could just give up 
that just not very good but sometimes what you can do is you can say i can prove a 
that says if you could improve that to n to the then here are a thousand other problems where 
could also improve over the best that anyone so kind of not my fault that stuck at n to 
and i can prove there is a more fundamental difficulty here sc so in other words we have this 
of problems that are computerfriendly we can state them precisely not like autonomous driving where not quite sure what 
a set of input bits and what discovering what discovering is that there is structure in the space of 
hard these problems are sa yes sc and trying to figure out which problems fit into different classes so 
become sort of oh the word not botanist but someone who divides things into species and things like that 
a taxonomist or something sc yes what you are yeah sa yeah yeah and i would say that like 
other kind of taxonomy what really after are sort of like the general laws the general principles no one 
into particle physics probably because they just want to classify every type of meson or every type of baryon 
what you hope is that by classifying things you will notice patterns and then you will notice a deeper 
there sc yeah i want to zoom over this too quickly because something that to me is on the 
hand both perfectly obvious in retrospect but also really profound the idea that the kinds of questions we ask 
along with a different set of difficulties when it comes to trying to solve them sa yeah yeah absolutely 
the theory of computation as we understand it today you could say it really started with alan turing in 
writing down a mathematical definition of what we mean by a computer he had this concept of a turing 
but if you know what a turing machine is fine because your iphone or your android or your desktop 
these are all equivalent to turing machines sc in the sense that just sufficiently powerful computers to do the 
of questions we ask sa exactly in the specific sense that they can all emulate one another merely some 
faster some are slower some will run out of memory a little sooner than others will but in principle 
the limit where you give them enough time and enough memory they can all compute the same set of 
and so then mathematicians logicians spent decades just understanding the boundary between what is computable and what is not 
one of great discoveries along with the invention of the turing machine was the discovery that not everything is 
there are problems where you can just prove that there is no algorithm to solve them in any amount 
time sc so the infinite complexity limit you can literally no number of steps guaranteed to give you an 
sa precisely precisely yes sc a question that falls into that category sa so the most famous example is 
give you a computer program now the question is does this program ever stop running okay the famous halting 
and that may sound like a boring question for debugging some code but that question actually encodes a large 
of all of mathematics sc yeah sa because we could write a program that just will enumerate over all 
zeros of the riemann zeta function and will halt only if there is one that is not on the 
line now that is a program where to determine whether that program halts or runs forever is equivalent to 
the riemann hypothesis and you could do the same for many many of the great unsolved problems of math 
a really profound question maybe it shock us too much that there is no general algorithm to solve it 
sort yeah math does depend on creativity who would have thought which mean by the way that human mathematicians 
never be beaten by machines it just means that if they are then the machines be perfect either sc 
this is a big big difficult set of ideas sa it is it is sc when you well we 
about the halting problem i guess i have many questions here sa yeah sc but you used the word 
what does that mean can we that sa okay it is much easier to say what creativity is not 
something can be done by a completely mechanical algorithm that we completely understand then maybe we would say that 
is no creativity there so like a multiplying of two integers for example you might choose to do it 
a creative way but it require creativity and sc but now skating into penrosean waters where going to say 
sa excuse me sorry sc skating into penrosean waters where roger penrose is going to say something about the 
brain that be a computer because we are creative and sa yeah well i agree with him to get 
where penrose goes you have to take this further step and furthermore i am in some sense a perfect 
i can just say that formal systems are consistent sc by i you mean roger penrose not you sa 
when i make a statement like that or maybe when i make it ex cathedra or something like wearing 
official hat then i am never mistaken sc so i think we need to slow down and unpack that 
little bit sa okay okay sc why you tell us in your words what penrose is trying to say 
yeah so he famously gave an argument which was really an updating of an earlier argument due to lucas 
said that human creativity can never be even simulated by a machine and the argument well we could actually 
the argument in terms of the halting problem as he sometimes does and there are certain algorithmic problems that 
know just cannot be solved by a computer using any amount of resources but then he would say in 
cases humans can just see the truth or falsehood of the relevant statement maybe even by introducing new axioms 
that second part that i have problems with yeah sc well i mean i get totally on your side 
but i get why he would say that because i have in my mind a vision of staring at 
computer screen with a simple algorithm with a loop in it and going yeah not going to or yeah 
and so why i somehow if you prove that i do that by a computer then it sounds like 
that humans are better sa right well i think the main issue is that when we talk about algorithms 
theoretical computer science typically talking about algorithms that always have to be correct i mean you can relax that 
even then have some specific condition like correct at least of the time on inputs that are chosen from 
distribution or something like that you have a formal criterion of whether your algorithm succeeds or fails and humans 
not like that when we try to do science try to do math there is no a priori guarantee 
we have to succeed andrew wiles when he started working on last theorem he had no guarantee of success 
sc yeah sa i mean yeah we can look back and we can count by confirmation bias we can 
the successes only but there are lots of other big math problems that no one has solved and for 
we even know whether they are solvable and so if as soon as you grant a machine the same 
that it can try to learn from experience it can make mistakes sometimes it can sometimes just give up 
say then there is no longer anything that math or logic can say against the machine doing just as 
as a human does or better than a human does and if you want to say that the computer 
somehow not as good i think forced at some point to retreat to internal criteria like you could say 
computer is just saying that it understands why a set theory is consistent but i just really really feel 
sc yeah okay sa and right but at that point i think you might why even talk about something 
abstruse as set theory you might as well just say you know when i taste the strawberry i really 
the chuckle sc oh there are people who say that sa yeah the full quality of strawberryness right and 
machine could only be programmed to pretend that and then it just reduces to the usual debate that everyone 
goes in circles with and get anywhere sc but this is very good because i so the point is 
when we are able to prove these theorems about what computers do because sort of restricting our notion of 
to something very very specific that it would be easy to jump out of right if you give computers 
randomness some fallibility some giveupability then there is no reason to think they be just as good as us 
vice versa sa well not so much that restricting the computer as restricting what counts as success i mean 
that really have to guarantee me that you will get the right answer you will halt then return the 
answer on all the inputs of this for example sc yeah got it sa and yeah as soon as 
to be heuristic well then a lot many more possibilities open up but yeah this is a whole fascinating 
that you can have just about computability but where i where i wanted to go was that when people 
building actual computers in the and they realized that well most of what they really wanted to do was 
in sense but computable could mean computable but taking an amount of time that grows like two to the 
to the two to the two to the n where n is the size of the input and then 
n is more than sc if n is sa completely hosed so i think it was the actual digital 
revolution that made people realize that often the much more important question than just is something computable at all 
is it efficiently computable is it computable in a way that avoids a brute force checking of astronomically many 
sc and so this is where we get into polynomial versus exponential sa exactly exactly yeah and i think 
is maybe the main insight that turing and von neumann were kind of missing well maybe they sort of 
it but i guess they had a lot of other stuff on their plates also chuckle sc it was 
exciting time back then sa yeah it was it was it was yeah yup yup sc they were not 
lockdown so they could really think about these things okay so give us more of a lay of the 
kind of explanation for what these computability classes are there are things that take exponentially long things that take 
long what else do we got sa yeah yes okay okay so you could say the most basic thing 
could do is just try to classify problems by how much time they take how much memory they take 
what can be done with a polynomial amount of time this is a class that we call p for 
you know physicists have much better names for things sc but also sa you know big bang black hole 
yeah sc to the audience they should not get sanguine because the only label going to even make sense 
to come at least seems to make sense sa look everything you can do with a polynomial amount of 
or memory called pspace pretty intuitive it sc okay sa and a potentially larger class because you could use 
same memory over and over but for an exponential amount of time so you could say polynomial time is 
in polynomial space which is contained in exponential time and the reason polynomial space is contained in exponential time 
that well if i have say n bits of memory then my computer can pass through at most two 
the n power possible states before either it halts or else it gets into an infinite loop an infinite 
so you can relate time and space to each other in that way now already here we encounter some 
the most enormous open problems in mathematics for example is polynomial time equal to polynomial space no one knows 
expect that the answer is no but no one has proven that sc sorry not let that go by 
quickly sa okay alright sc you said before contained in but you mean that not sure whether the same 
or smaller sa right exactly exactly everything you can do in polynomial time you can also do in polynomial 
and because at least if i have like a serial computer each time step is accessing at most one 
location so after t time i can access at most t memory but we know whether everything you can 
in polynomial memory can also be done in polynomial time we would expect no because that if the answer 
yes that would mean that for example there was just some super duper algorithm to play chess perfectly or 
or any other game not merely as well as say alphago plays it but to play it perfectly sc 
gotta fill in the details there you mean because we could just give it enough memory sa well because 
is known that you could perfectly play any of these games like twoplayer games of perfect information using a 
amount of memory because all you need to do is evaluate called the game tree the game tree is 
thing that says is there a move i can make such that for every move that the opponent makes 
is a move i can make and so on such that i win and a tree where you can 
just traverse that tree an exponentially large tree but you can reuse the same memory over and over so 
games a problem you can do in small memory now if p were equal to pspace that would mean 
perfectly playing all these games would also be a problem that you could solve in a small amount of 
sc yeah okay sa okay and that would be amazing and then is pspace equal to exponential time so 
that you can do in exponential time can you also do it with small memory again no one knows 
expect that the answer is no no one has proven it again i want to give the impression that 
ignoramuses as one example we do know that exponential time is bigger than polynomial time okay that we know 
okay sa okay so we can prove that when got more time then you can solve more problems that 
solve with less time likewise when got more memory you can solve more problems that you solve with less 
but when comparing different resources like time against space then it becomes very hard sc so just to translate 
saying that we know there are problems that cannot be solved in polynomial time but can be solved in 
time and likewise for space sa precisely yes and even more fine grained than that we know that there 
problems that can be solved in n to the time that cannot be solved in n to the time 
example sc it is an interesting feature of this field not going to give you a hard time for 
having proven anything yet okay everything yet sa i have proven something just not the things that we most 
yeah sc but there is this thing that comes up over and over again where something we proven yet 
every person has the same opinion about what the answer is eventually going to be because it would lead 
this very very strange thing if it turned out not to be true how reliable is that sort of 
in your mind sa well i think that we need to be prepared for the possibility of surprises i 
say that there already have been surprises there have been cases where people thought that two complexity classes were 
that then turned out to be the same i would say that none of those were nearly as surprising 
say p equals pspace would be sc would be right sa but there were things i mean look if 
were no surprises then you could say sc why bother sa why even do it so yes there have 
surprises but i think that the right way to think about it is that even though this is pure 
the way that we approach it has some elements of empirical science also physicists prove that no superluminal signalling 
prove that quantum mechanics is correct these are taken as very wellsupported assumptions relative to our present state of 
say and then much more fine grained things than that like that a cpt symmetry and that and on 
on sa and you could have sort of a hierarchy of surprisingness if you could if say the opera 
had been correct and you could really send the neutrinos faster than light well then that is at the 
of the hierarchy of surprisingness and there are many other things that could happen in physics that are not 
as surprising as that a new particle at the lhc but still you would take it it would and 
would still overturn something that had been previously believed so i think sc amazing to me how many people 
up that those damn superluminal neutrinos as something that is in head as something you guys almost believed that 
a while sa well no look the physicists i know none of them thought it was very likely that 
was correct sc we have priors good bayesians so the point also in sa exactly exactly and i would 
exactly the same with us we are just trying to be bayesians and have priors on things and yeah 
you can say if two complexity classes say if they have been enormously studied for sixty years and again 
again people did things that if they had turned out slightly differently then these two classes would have been 
and yet every single time it just miraculously avoids whatever theorem they prove just miraculously avoids the thing that 
make those classes equal then you start to suspect that well maybe there is a deep reason why different 
do you begin to anthropomorphize your complexity classes as you learn more and more about them do you say 
they want this to happen sa oh absolutely oh absolutely yeah no this is the thing each one has 
personality like comic book superheroes each one has a different set of powers and sometimes some are just clearly 
more powerful than others other times you get two classes with just bizarrely incomparable powers and so then you 
to compare them to each other but just kind of i know like one of these internet memes of 
would win in a fight godzilla or batman or something i know sorry just from different universes sc exactly 
but yeah but the sort of less obvious maybe slightly less obvious thing you can do but it turns 
to be of absolutely central importance is you define complexity classes in terms of what is provable okay or 
has a short proof and this is what we need to do i would say the next most famous 
class along with p which is called np okay now np stand for not sc see sa okay it 
for nondeterministic polynomial but worry about what that means yeah i can say what it means in plain language 
problem is in np if whenever the answer to it is yes meaning like yes there is a solution 
someone can show you the solution and you could check the solution using a polynomialtime algorithm so let me 
an example like a jigsaw puzzle okay especially if there is no picture on the jigsaw puzzle it could 
could take quite a while to do one sc yeah sa but once done and made some neat square 
then you anyone who believe that you did it you just show them that you did it similarly finding 
prime factors of a gigantic number this is well for better or worse most of the encryption that we 
on the internet is based on the belief that this problem is hard this and a few closely related 
that finding the prime factors of a gigantic number is a hard problem but if you did find the 
then well you might not want to multiply them but your computer could very easily multiply them and check 
those factors were the correct ones sa likewise with a sudoku puzzle likewise with optimization problems it might be 
to prove that found the best solution but if you just want to say a consultant you want to 
your client that found a solution that will only cost them this much money well you just show them 
solution so these are all examples of np problems and the way things fit together is that p is 
in np which is contained in pspace yeah sc by the way i just want to make it clear 
everyone sa yeah absolutely absolutely sc the picture that we have there is this big space of problems and 
draw some kind of venn diagram of these complexity classes but they need to be nested two complexity classes 
have some intersection but some nonintersection also and a third one might intersect with some of them but not 
is that fair sa sc they all live right inside each other sa all of these things happen yes 
okay sa so some of them do fit in a linear order as i was saying before but probably 
well some of them do fit that way like p is contained in np is contained in pspace is 
in x meaning exponential time and we believe that each one is strictly more powerful than the last but 
we know so far is that x is larger than p okay so yeah which means that either p 
different from np or np is different from pspace or pspace is different from x at least one of 
three has to be true we think all three of them but we only know that at least one 
true sc and you sa now the yeah sc you mentioned about factoring that you believe hard but you 
that we know hard sa right right so now we can go in and in fact we know that 
np problem is hard this has been the situation for the last half century that we famously we cannot 
that p is not equal to np okay that is yeah sc so sorry sorry np problems are those 
we can easily check the answers sa exactly exactly sc and saying that we believe there are problems that 
hard to solve but easy to check but we prove it yet sa exactly sc we cannot prove it 
sa exactly exactly that if yeah if listeners have heard of the famous p versus np question that is 
question and now factoring is an np problem but factoring we think is a very special problem okay so 
could be that someone just discovers a fast algorithm for factoring and then that would break most of the 
of electronic commerce but it necessarily mean that p would equal np maybe they just solved that one special 
now the surprising part the big surprise to people in the early was that most of the hard problems 
np are not like that most of them have an amazing property of universality a property that we call 
and what npcompleteness means is that you show that your one specific problem has the property that if anyone 
solve it in polynomial time then p would equal np then you could solve every np problem in polynomial 
sc so this goes back to the thing that mentioned before where you just relate the hardness of problems 
each other even though you sa exactly sc you might not know what the hardness of any of them 
but you can say that equally hard sa you know all the same yeah so this is exactly what 
was talking about before about you may start out as a taxonomist but ultimately you want to discover something 
right and what you discover is that there is this huge class of easy problems the p problems then 
is this huge metropolis of hardness these npcomplete problems which includes just literally thousands of the problems that engineers 
scientists would care about airline scheduling traveling salesperson problem just about any kind of combinatorial optimization problem that you 
imagine involving a whole bunch of variables a whole bunch of constraints problems like that will be npcomplete unless 
have good reasons not to be sc is this one of those ones where packing luggage into your trunk 
one of them sa yup fitting luggage into the trunk of your car that might be one that many 
have experience with there is a beautiful paper from a decade ago that proved that super mario is npcomplete 
yes yes sa you have to create these crazy levels with these weird patterns of these koopas that you 
on that encodes a logic problem but you can do that so basically you yeah sc but the luggage 
your trunk is a good reminder because even though we say npcomplete means super duper hard people have put 
in their trunk what we mean is sa they have sc as their trunks if you imagine large and 
trunks and more and more luggage it just becomes very unwieldy very quickly sa right right what it means 
that if i wanted to i could give you a very very hard time figuring out how to fit 
luggage into your trunk i could even in principle i could design some millions of boxes of different dimensions 
would have the property that you can fit these boxes into your trunk and have it closed if and 
if there is a proof of the riemann hypothesis of it a certain length okay or for example that 
order to fit them in your trunk you would have to break some cryptographic code i could also do 
sc but if someone showed you a way to put them in your trunk you would be easily enough 
be able to say yup that it was easy to check sa yup exactly exactly yeah so these npcomplete 
and sort of a priori it have to be that way but this is a substantive discovery that most 
these hard np problems are actually all equivalent to one another in the sense that a fast algorithm for 
one of them implies a fast algorithm for all the rest and then there are a few outliers factoring 
one of the weird ones okay that might be somewhere in between p and npcomplete in some land sc 
the anthropomorphization and the personalities does thinking about this stuff tend to turn you into a mathematical platonist thinking 
there really is a mathematical reality out there because of all the structures that you have imagined existing before 
it sa yeah i feel like probably every mathematician while actually doing their work is in practice a platonist 
might claim later that not one but to do math is a push back against something that can tell 
that you were wrong not just a thing that you were making up it is a thing that has 
that are external to you and in that way it is like empirical science sc well yeah made that 
before made that point before and i think really interesting because i think made the point in comments on 
blog that this kind of i will mention in the introduction that you are a worldfamous blogger and stuff 
that sa oh very kind sc that the kinds of things we learn about the real world by these 
mathematical discoveries are at least rubbing shoulders with the kinds of things we learn about the real world by 
empirical science the universe could have been expanding or contracting and we had to go out and look at 
to find out which way it was but really really hard to put boxes into your trunk in the 
efficient way and you want to say that one of those is comparable to the other in terms of 
insights about the universe sa yeah funny because i am often in conversations with my many many physicist friends 
we are ribbing each other and they will point out that oh just a platonist in some abstract lala 
while they are dealing with the real world and then if these are theoretical physicists i can reply that 
author on more experimental papers than they are sc safe bet yup sa but yeah yeah but look even 
physics you are a theoretical physicist and a cosmologist you are not on a typical day out at the 
peering through a lens sc certainly not sa you are thinking you are thinking hard about things that we 
know and trying to deduce the consequences of those things or trying to build models that explain something and 
what we do in math and in theoretical computer science sc yeah no on your side i just want 
give you a chance to put it into your words sa yeah yeah yeah yeah yeah sure but no 
have described my position as not so much a platonist but an antiantiplatonist because look plato wrote all kinds 
really weird trippy stuff and i want to give him a blank check that i agree with whatever he 
i even read enough of plato to know if i agree with everything he said and it sounds quasimystical 
weird to be talking about this world of perfect triangles and perfect squares or whatever i know if it 
a metaphysical existence but i will say this that if we ever encounter an extraterrestrial civilization and we are 
to communicate with them i think that they will agree with us about the pythagorean theorem i think that 
will have discovered much of the same math as we have discovered because i think that it is not 
an arbitrary cultural creation it has cultural aspects but it is constrained by well by logic by truth sc 
yeah okay let me push back a little bit on that in my role as a advocate on the 
yeah sc the pythagorean theorem is true in euclidean geometry so a conditional statement that says you accept the 
set of axioms then you prove the pythagorean and every statement in math is like that if the axioms 
true then the conclusions follow but so one could say we will never learn anything exclusively about the actual 
that way because we know what axioms are true sa yeah okay so there are really two questions one 
which we could call the easy question if we can agree on the same axioms with the aliens will 
agree about the consequences of those axioms and i hope most people would agree that the answer is yes 
about what are the laws of logic or what are the rules of inference that we can use to 
draw conclusions from axioms but then there is a broader question maybe a harder question will we and the 
have thought of the same axioms or will we have thought o f about similar mathematical objects such as 
space the space where the pythagorean theorem holds or such as the positive integers and i okay so there 
are some mathematical objects that we have invented that probably the aliens will not have invented chess could be 
example of such an sc that would be weird sa maybe a particular cryptographic codes that we happen to 
like aes i doubt the aliens will have that but be willing to wager a lot that the aliens 
have a concept of integers that they will have a concept of euclidean space and even more than that 
will have a concept of complex numbers and things of that kind there are certain things that are just 
really fundamental to the mathematical universe where even if you started out in a different direction you would eventually 
to reinvent those concepts because so ubiquitous sc if i were really being the advocate i would say that 
the reason why certain sets of axioms seem so natural to us is because not of math but because 
physics of the particular way that the physical world around us has arranged itself to make certain things more 
for us to describe it sa yeah well okay well then it becomes an even more interesting question say 
i was imagining talking to aliens who live in the same universe as we sc selflimited sa even though 
had a completely separate evolutionary history but now we could also imagine some aliens in some parallel universe with 
different laws of physics maybe not even quantum mechanics maybe they even have spacetime even approximately i know maybe 
just sitting on top of each other or something but one thing that we can say is that we 
imagine many ways that the laws of physics could have been different but where we would have invented much 
same math in order to think about it so i mean and in fact it has happened again and 
in the history of math and physics that mathematicians have invented a certain concept well in advance of that 
being needed by physics right sc sure true sa they had their own reasons for inventing it that were 
in any direct way motivated by physics but then they just turned out to be very handy when physics 
reached a certain point and i think if you look at examples like that you could say maybe that 
just because these concepts are so fundamental that sort of any laws of physics if you go deep enough 
them you want to understand them deeply enough you might be tempted to reinvent those concepts sc i think 
sa like for example concepts of symmetry groups would be an example sc yeah i think that this is 
rabbit hole we could profitably dig even deeper but i do want to switch topics onto your opinion of 
heard on the internet which is that once we build quantum computers all of these hard problems will become 
easy laughter sa ah okay yeah so this actually feeds beautifully into the discussion that we were having earlier 
could there be different classes of problems with different incomparable powers now a perfect example of that is provided 
quantum computers okay so once we ask what is efficiently computable what is computable in polynomial time you might 
that the answer to that might depend somewhat on physics and actually apparently it was asking that question that 
david deutsch to the idea of quantum computing in the first place in the early sc so the way 
it could potentially depend on physics is because what it means to do a computation depends on what kind 
physical things pushing around sa yeah precisely precisely now definition of computability in the had this amazing invariance to 
details of physics it it care whether the universe is classical or quantum or how many spatial dimensions there 
you just get the same notion of computability okay but once we ask about efficient computability polynomialtime computability well 
still very very insensitive to a lot of the details of physics and why we like this notion that 
gives you a nice elegant theory that depend on your specific model of computer but the really cool thing 
emerged in the and is that well changing the laws of physics from classical to quantum that does seem 
be enough to enlarge what is computable in polynomial time okay once again this surprise you at this point 
one has proven laughter sc right sa okay but we think so okay so the way to say this 
complexity language is that there is a class of all the problems that are solvable in polynomial time using 
quantum computer which we could get into exactly what that means but a computer that could have not just 
in its memory but quantum bits what we call qubits bits that can be in superposition states and that 
even be entangled with each other and so the key property here is that if i have say one 
qubits one thousand quantum bits then just to describe their state i need a list of two to the 
thousand complex numbers i need a quantum mechanical amplitude for every possible configuration of all of these bits so 
about enormously larger objects here and so that at least opens up the potential that we could compute more 
in polynomial time it will take work to see whether that potential is realized but we can define a 
of problems that is called a bqp boundederror quantum polynomial time this was defined in by umesh vazirani who 
my adviser at berkeley and his student then ethan bernstein sa and they basically just defined it as a 
mechanical generalization of p so like what you can do in polynomial time with a quantum computer the b 
bounded error just saying that well the computer always have to output a right answer it just for every 
you should have say at least a chance of getting the right answer sc yeah because deep within that 
and happy with that because if you like well then just repeat the computation a whole bunch of times 
take the majority vote among the answers sc yeah sa right so bqp now pretty easy to show that 
contains classical p or in other words a quantum computer can always efficiently simulate a classical computer sc that 
sense sa right the way i like to describe that is you could use a space shuttle to taxi 
the parking lot you know what i mean it be very smart it be very useful but you could 
it the interesting question is is bqp larger than p are there things that you could solve in polynomial 
with a quantum computer but you solve in polynomial time with a classical computer or that would even take 
time for a classical computer sc right sa okay so and we know the answer i mean when richard 
talked about this in the early he suggested the problem well what about the problem of simulating quantum mechanics 
and that is one of our best candidates to this day for what a quantum computer will be useful 
if and when we can really make it practical but maybe some people would like a less autological example 
what a quantum computer could do or sort of an example that is not itself about quantum mechanics so 
came via a now superfamous discovery in and this was when peter shor discovered algorithm for factoring okay so 
shor discovered was that the problem of factoring huge numbers the one that we talked about before the one 
most modern encryption is based upon and an np problem but kind of special we know whether np or 
shor showed that the factoring problem is in bqp okay so he showed that if you could build a 
computer then you could factor an ndigit number using a number of elementary operations that only scales like n 
roughly sc right whereas classically sa okay and so this means excuse me sc whereas the classical belief sa 
best known classical algorithm takes time that grows like exponentially and roughly the cube root of n sc okay 
okay something fancy called the number field that uses the algebraic sc but we count that as exponential even 
the exponential sa yeah count that as exponential and i am sure that the nsa cares enormously about the 
free factors in that exponential and so forth but yeah count that as exponential sc but we yeah sa 
sc but we know that there a better one classically the issue sa right that we absolutely do not 
that and in fact we it could be for all we know today that p equals bqp in other 
maybe everything that a quantum computer can efficiently solve could also be efficiently solved by a classical computer right 
what shor showed again just relating our different domains of ignorance if you wanted a general way to simulate 
mechanics with a classical computer then you would also have to invent a fast classical algorithm for factoring sc 
and it is true i think we do know that there are problems for which there is a quantum 
that is provably faster than any classical algorithm but not in an entirely different complexity class is that right 
yeah right so this okay good good now getting to something that is when i teach my undergraduate class 
is always one of the more subtle points but glad asking about it there is a thing called the 
box model okay where sort of a different game a different domain where you just ask the question suppose 
i have a black box that just evaluates some function for free and now maybe a subroutine where i 
its inner workings for example okay and now i just ask many questions do i need to ask to 
black box in order to learn something that i sa so as an example i love playing a game 
the game with my sevenyearold daughter where she shall think of a number from one to and then i 
it bigger or smaller than is it bigger or smaller than so yeah and with seven questions you can 
the number right so she would then be a black box and we could say that the query complexity 
this problem is seven queries but now you could ask and people have asked what changes if i could 
ask my daughter many questions in quantum superposition and get back a superposition of answers and then sc if 
can do it scott i think that going to be you chuckle sa what sc if anyone can do 
i think the best bet sa okay alright alright anyway in this model of query complexity here we really 
have proven advantages of quantum computers over classical ones and some of these advantages are exponential some of them 
even more than exponential by the way there are problems involving end bits of input where it takes square 
about square root of n queries to solve them classically and they can be solved with only one query 
a quantum computer okay literally one by the way a paper that my colleague andris ambainis and i wrote 
years ago and we also proved that that gap is the largest possible one between classical and quantum sc 
okay good sa but just plugging my own sc yeah why here sa okay but yeah yeah but so 
the setting of query complexity we do know how to prove that quantum computers are strictly better than classical 
for some problem but now you could say in the real world so query complexity is like a very 
useful playground for figuring out what might be true like if you even get a separation in query complexity 
probably you have no chance to get a separation in the real world between one type of computer and 
type but ultimately you do want an advantage of quantum computers that will persist even in the real world 
you have these magic boxes for answering questions right so i often explain it to physicists by saying complexity 
our perturbation it is the street light to look for your keys under where you can actually answer the 
but okay sa so in this what we know is that p is contained in bqp meaning everything a 
computer can do so can a quantum computer we also know that bqp is contained in pspace which means 
that you can do in polynomial time with a quantum computer you can also do in polynomial space with 
classical computer okay so that means several things that means that in terms of running time in the real 
quantum computers could at most give you an exponential advantage over classical ones so not going to solve the 
problem not going to solve anything that is literally uncomputable for a classical computer but they could solve certain 
up to exponentially faster sc okay sa okay and it also means that we have a very good excuse 
why we cannot prove today that quantum computers are better than classical computers in the real world and the 
is if you wanted to prove that p is not equal to bqp well then you would also have 
prove that p is not equal to pspace a famous unsolved problem like as big a problem as p 
np sc yep except make less money for solving it sa yeah well yeah right right it happens not 
have a million dollar prize but you know what i say about by the way so there were for 
who know there are these seven dollars million clay challenge problems the first one is p versus np and 
there is the riemann hypothesis there is the poincare conjecture which was solved by perelman although he refused the 
i have done that but okay sc i have done that sa yeah yeah and there are four other 
i like to say that p versus np is just clearly the most important of the seven right laughter 
and i have several reasons for that one of them is that well if if you could prove that 
were equal to np and furthermore your algorithm was actually efficient in practice so not like n to the 
thousand but say n squared or something like that well then yeah you could not only collect a million 
for solving that problem but you could also solve the other six problems laughter sa because you would just 
your computer to say there a proof of at most a million characters written in some formal language that 
computer can and because a computer can easily check the proof that means that if there then if p 
np the computer can also easily find the proof but not only that forget about these measly million dollars 
p equals np you could start by stealing two hundred dollars billionworth of bitcoin laughter sa and i guess 
decide what to do next in your quest for world domination okay but yeah sc but i think this 
important because it really is driving home the reason why when mathematicians say things like even though we proven 
p is different from np all sure not true because np is this collection of problems some of which 
so hard that if you showed that they were really easy be axiomatizing all sorts of things that we 
are just preposterously difficult sa exactly so yeah some people they may have an intuition that well when i 
across npcomplete problems in my application domain which might be some machine learning some ai optimization oh they tend 
to be so hard i just run some heuristic algorithm and it does perfectly well so what makes you 
sure that p is different from np and you know my response tends to be why you made billions 
dollars from mining you could say since two thousand eight been the easiest answer right i mean i mean 
if you only try to solve easy instances of your problem then they will be easy laughter sa but 
point of a problem being npcomplete is that you can encode these enormities into it like finding a proof 
the riemann hypothesis like mining billions of dollars of bitcoin and so forth anything for which an answer could 
easily checked or another example would be compress wikipedia into the best the smallest file you can where it 
then be easily decompressed okay another example of an np problem where in order to solve that problem it 
at least a plausible speculation that the computer would have to understand human knowledge in a very very deep 
and solve a lot of the problems of artificial intelligence but again if p equals np you would just 
with a few key strokes you would do that sc and likewise this is why our intuition tells us 
even quantum computers are not going to be able to solve npcomplete problems sa exactly yes good so now 
come to a wonderful example of two complexity classes two models of computation that we really do think are 
and those or that as far as we know are incomparable and those are np and bqp okay so 
easily checkable problems and the problems that are easily solvable by a quantum computer now in some sense the 
mistake that popular writers make when they write about quantum computers and this has been true for twentyfive years 
now okay is that they conflate np with bqp right sc yeah sa they write as if a quantum 
would just be a magical machine for solving np problems they say look a quantum computer just has to 
each possible answer in a different parallel universe a different branch of the wave and in some sense it 
actually true that a quantum computer can do that not even a hard thing to do to program your 
computer to create a superposition over every possible answer the hard part is reading out the answer that you 
okay laughter sa so if i just you know you know this sean but for the benefit of our 
if i just create an equal superposition over every possible answer to some super hard problem like all possible 
for breaking a cryptographic code say and then i just measure it not having done anything else the rules 
quantum mechanics tell me that what i will see will just be a random key a random answer sc 
sa well if i just wanted a random key i picked one myself with a lot less trouble i 
to build a quantum computer for that then that makes it sound like that maybe quantum computers are not 
useful for anything at all if all they can do is pick random answers but no it is a 
more than that that they can do and the reason why they can do more is that the quantum 
of probability are different from the classical rules of probability so in quantum mechanics each possible configuration that your 
could be in gets assigned this number called an amplitude which is very closely related to the probability that 
see the system in that configuration when you look at it but not a probability so unlike probabilities amplitudes 
be negative they can even be complex numbers sa and in some sense the central trick in quantum computing 
trick behind every single quantum algorithm is this that you are trying to choreograph a pattern of interference of 
amplitudes where for each wrong answer what you would like is for the amplitude of that wrong answer to 
a sum of many contributions potentially but some of those contributions should have positive amplitude and some should have 
amplitude or they should point in every which way in the complex plane and so they mostly just cancel 
other out whereas for the right answer the answer that you do want to see you would like all 
the contributions to its amplitude to be pointing the same way or mostly the same way so you would 
constructive sc like a resonance sa yeah exactly for the amplitude of the right answer if you can arrange 
then when you measure the right answer will be seen with high probability and of course if not seen 
can just try again until it is but trying to exploit interference to boost the probability of seeing the 
answer to way way more than it would have been with any similarly efficient classical algorithm sc yeah sa 
the tricky parts here are that gotta do all of this despite not knowing yourself which answer is the 
one in advance if you knew that then there would be no point so you need to arrange this 
pattern where you know for some mathematical reason that going to concentrate the amplitude on the right answer even 
you know yet which one that is and gotta do it fast gotta do it much faster than just 
classical brute force method could have found that same answer or else the quantum computer is not winning so 
is a really bizarre hammer that nature gives us for extending computation beyond what turing knew about and it 
a happy miracle that we can occasionally find some nails for that hammer to hit sa okay yeah factoring 
a very famous example of such a nail but now it is very important for people to understand that 
design his fast quantum algorithm for factoring peter shor really had to exploit some very special structure in the 
problem stuff that comes from group theory from number theory from the fourier transform just a beautiful set of 
that goes into it but it is not something as simple as just i try every possible divisor in 
different parallel universe if it were that simple you have needed peter shor to think of it and as 
as we know it is not something that extends generalizes to the npcomplete problem sa i said before that 
is not believed to be npcomplete it has a lot of very very special structure just one simple example 
if i gave you some boxes to fit into your trunk a priori they might not fit at all 
there might be only one way to fit them or there might be one thousand ways to fit them 
know but if i give you some huge composite number than no matter how hard it is to factor 
know in advance that it has one and only one prime factorization because you could prove that three hundred 
so factoring is special in a whole bunch of ways and its specialness on the one hand is what 
it so useful for cryptography you use the structure of factoring to do all the beautiful things that enable 
cryptography but the other side of the coin is that that structure is what shor was able to exploit 
order to choreograph this interference pattern with a quantum computer that reveals the factors of your number sc but 
does sound a little deflationary in the sense sure correct this but it sounds like factoring we lucked into 
in the sense that it is a hard problem but one that quantum computers are very good at typical 
hard problems will still be exponentially hard on a quantum computer is that a safe thing to say sa 
is what we think that is what we think and by the way this is something that been trying 
is not controversial by the way within the field and been trying to explain it to people for fifteen 
twenty years it used to be the tagline of my blog because i found myself just explaining the same 
to journalists week after week after week no we do not expect that quantum computers will just exponentially speed 
everything it depends on the structure of your problem because this is often not what people want to hear 
i feel like we should be telling the truth yeah sc like this podcast will do it now that 
mindscape i think that everyone will be educated and you have to explain anymore sa right right yeah yeah 
no well i love having a forum that is so devoted to the truth as i know that you 
sc there you go sa but now i should say that even for npcomplete problems we expect an exponential 
up from a quantum computer once again we prove that which is no great surprise we even prove that 
is different from np if we even prove that classical computers solve these problems quickly far less can we 
that quantum computers do it but what we generally think is that quantum computers would give you more modest 
for these problems okay so after algorithm maybe the second most famous quantum algorithm is called algorithm it was 
just shortly afterward grover by the way was worked down the hall from peter shor then at bell labs 
these ideas were in the air then and i actually started in the field doing a summer internship with 
sa but what he discovered was that there is a quantum algorithm that can search a list of n 
in only about the square root of n steps okay where classically if i just told you are n 
and inside one of them is a golden well going on average going to have to open about n 
two of the boxes until you find that nugget i have just sort by fiat i have ruled out 
other structure that you get to exploit here right sc yeah sa but what grover showed is that if 
can ask about every box in quantum superposition and then take my superposition of answers do some quantum mechanical 
to it what we call a unitary transformation then ask another question and so on and so on then 
is a way to get all or almost all of the amplitude onto the right answer that is onto 
box with the golden nugget in it by asking only about square root of n question sc right sa 
so what this means is that for example if you had some combinatorial search problem say an npcomplete problem 
previously it would have taken you say two to the one hundred steps to solve with your classical computer 
by layering algorithm on top of what you were doing classically typically you would be able to solve it 
about two to the fifty steps with a quantum computer okay and sc yeah sa that will expand the 
of these sizes of problems that you can handle and i think that absolutely would have applications in a 
with fully scalable and useful quantum computers just not the exponential speedup that you get from factoring sc and 
anyone out there who knows a little bit of quantum mechanics studying and understanding algorithm is way easier than 
actually pretty straightforward sa that is true that yeah that is true and actually the reason for that is 
algorithm twothirds of it is just classical number theory got nothing to do with quantum mechanics right just getting 
into the form where you can then do something quantum right sc yeah and who wants to learn that 
so when so i do teach all of these things in an undergraduate course for which the only prerequisites 
linear algebra and some classical programming or like say a semester of classical algorithms i teach all the quantum 
that we need for the class and we do and algorithm but typically yeah algorithm would be three lectures 
would be one lecture sc and we should also plug your book on this podcast sa oh yeah yeah 
i do have a book called quantum computing since democritus yeah it was published seven years ago it is 
a popular book it is also not a text book it is in some intermediate complexity class sc superposition 
sa in between i know exactly what it is but when i wrote the prospectus for the publisher i 
him well kind of like whatever audience is buying books hoping that they would also buy this book sc 
subset thereof yes sa yeah yeah yeah yeah yeah right yeah sc so okay obviously a large terrain of 
about the reality of quantum computing and things like that but for lesser minds we have other fish to 
i would like to start talking to you about the nature of space and time and stuff like that 
again maybe a little bit of a surprise that famous physicists like john preskill and lenny susskind who grew 
doing particle physics and quantum field theory and cosmology have taken to quantum computing and quantum information in such 
strong way why do you think that this set of ideas that started by how can we improve the 
at which a computer can answer a certain kind of question suddenly seems to be everywhere in discussions of 
nature of spacetime itself sa yeah well okay so i have several thoughts the first one is the one 
me about the nature of space and time laughter sa but okay but yeah but no my second thought 
the specific people you mentioned john preskill eddie farhi we could add ray laflamme by the way these were 
people who started out in high energy physics but then very early so back in the kind of switched 
quantum computing and quantum information basically after algorithm came along and i know all of them so talked to 
about what some of their reasons were and i think mostly just it was something that was new and 
and where the knowledge that they had was relevant it was not the only thing that was relevant computer 
and information also was but these were people who knew quantum mechanics really really well and high energy physics 
is one of the great pursuits of the human species but if advising a student on what they should 
in and they really really have their heart set on doing high energy physics well there is an immense 
of brain power that is being expended on not a huge set of questions on a very say a 
tall and narrow tower of knowledge sa and there was an unbelievable success over the course of the century 
building up that tower and now that in this world where the lhc has found the higgs boson it 
anything else one could ask the question of should we just continue trying to add a millimeter to this 
in the way that we knew or should we go down to the land and look for what else 
being built somewhere else sa these are no one right answer to these questions an answer for each individual 
make for themselves but i think it quantum computing especially in the was a field that was just full 
lowhanging fruit and i think really fundamental questions i think that to someone like preskill it was clear that 
is not just a technological question this is not just an engineering design problem of build this quantum computer 
is a fundamental question of is nature going to allow this at all can a scalable quantum computer be 
or is this so ridiculous that we should just suppose that there is something about quantum mechanics that we 
not yet understood that is going to prohibit getting an exponential computational speedup in this way sc yeah i 
i understand your point in fact i think being diplomatic about it as amazing as high energy physics is 
a big fan myself a mature field that has slowed down a little bit the rate of progress but 
less about people who have switched from high energy into quantum computers versus people the thing they want to 
is still why black holes evaporate in a certain way and decided that ideas from quantum information theory are 
to that somehow sa yes well that is a newer thing that has happened and actually right where i 
headed next because in the people went into quantum computing i went into it in the and did not 
that it was going to say anything about string theory about black holes about spacetime maybe even then i 
hoped it would but i had no basis for that hope sa and i would say that within the 
eight or nine years something really amazing has happened which is that the things really have circled back and 
people who talk about quantum gravity these days about the black hole information problem and about the adscft about 
spacetime at least the ones who i talk to they are talking about it largely in a language of 
and qugates quantum circuits acting on those qubits and entanglement and the entanglement structure of the quantum states that 
get and even complexity the complexity of doing various tasks to these qubits sa and this has been an 
development for me because like well now i can actually talk to you about this stuff this is a 
that i can parse at least half of what saying now and if you look at the list of 
of the strings conference in recent years it is quite remarkable to an outsider like me how much of 
is not explicitly about strings at all but is about sort of ideas that are just as much quantum 
sa so if i had to the way that this happened is a long story but you could say 
some sense it goes back to hawking in the and bekenstein the story goes back to the black hole 
problem that said there is this fundamental conceptual problem about black holes and this problem is information theoretic in 
in some sense the problem is explain how information can come out of a black hole as it needs 
do in order for the evolution of a black hole to be unitary to be fully compatible with quantum 
as we understand it and it was thinking about matters like those that people in the and were led 
the realization that a black hole has an entropy not only does it have an entropy but it has 
largest entropy of any object in the universe of a similar size you could say a black hole is 
highest density hard disk that is allowed by the laws of physics specifically it stores about ten to the 
bits or rather ten to the sixtynine qubits per square meter of surface area of its event horizon roughly 
certainly in their highest entropy state so not a very useful hard disk sa right right so well really 
great for retrieving the bits the other problem with it have to wait for these bits to fizzle out 
hawking radiation which might take ten to the years or something like that and then be in some completely 
form so not a very useful hard disk but even just purely by the lights of information theory or 
science black holes are interesting black holes are an extreme object and so these were realizations that people started 
have in the and sa i would say it was not really connected yet to computer science it was 
something that enormously intrigued me even in i talked to raphael busso at that time i talked to juan 
and maldacena was joking with me about it a couple of years ago i go you were this crazy 
who was saying that complexity was somehow going to be relevant for quantum gravity and i was trying to 
polite to so yeah but i would say that what really made it click what really made this connection 
in a deep way a lot of it started in which is when there was this now famous paper 
amps paper almheiri marolf polchinski and sully that pointed out this thing called the firewall paradox and this well 
long story this firewall paradox okay sc that was a punchline of it sa but basically you if worried 
how information can come out of a black hole led from there to the idea that well the information 
have gotten out from the singularity so really what you would like for it to have happened is that 
of just fizzling off from the on or very near the event horizon and in fact if an observer 
of a black hole well you never even see anything fall into the black hole in the first place 
just see it get slower and slower and pancaked over the event horizon and scrambled there sa and so 
observer outside of a black hole ought to have a description of going on where all the bits of 
that are dropped into the black hole are just sort of pancaked on its horizon scrambled on the event 
and then come off from there and yet an observer who falls into the black hole has to have 
completely different picture of the same physics for them they have to see that the information really has fallen 
and that there is an interior of the black hole in the middle of which is a singularity sa 
so then these two completely different sounding descriptions have to be somehow dual to each other they have to 
two different ways of describing the same thing so then that leads in the to this idea of the 
principle that you can have different physical theories with different numbers of spatial dimensions but that are somehow one 
just an encoding of the other one so you can encode everything that happens in a given region of 
by some hologram that lives on the boundary of that region and then people were i say like satisfied 
all of this but they thought they had the broad outlines of a solution to the black hole information 
and then basically in this amps paper came along and it broke everything again sc just to fill in 
sa it said that if you write down certain postulates that seem like they should be clearly true like 
observer who is falling into a black hole notices nothing special as they cross the event horizon and black 
from the outside perspective they quickly scramble information and a few other postulates then you could write down an 
that in principle some observer who was outside of a black hole could do so how the experiment would 
say alice so you dropped some stuff into a black hole you keep track of its exact quantum state 
some superduper powerful quantum computer and now you wait for the black hole to mostly but not completely evaporate 
you know for a black hole the mass of a star this might take ten to the sixtyseven years 
assume that you have a really long grant okay you collect all of the photons of hawking radiation that 
out of the black hole you route them all into your quantum computer for analysis then you do a 
measurement on those photons that proves that they were not in a completely thermal state sa in other and 
can argue that once the black hole has more than evaporated then something special happens where you can actually 
very subtle correlations in the hawking radiation that shows that they actually do encode the information that fell in 
create the black hole okay so you get excuse me sc yeah so just to be clear about this 
phrase not completely in a thermal state in this sentence that you just said means that not completely random 
there is some information encoded there that is related to what fell in sa yes precisely precisely you detect 
correlation with the stuff that fell in and again this is something that in principle you can do after 
black hole has more than halfway evaporated okay sc yeah okay sa and then having done that you then 
jump into the black hole and you see on the other side and now for reasons of quantum field 
that i well a not expert on and b not sure if we have time to go into but 
of the correlations that you saw outside of the black hole you you either see a complete breakdown of 
rules of quantum mechanics as you cross the event horizon or else if you want quantum mechanics to still 
then you have to see a wall of ultra high energy photons that are so high energy that you 
disintegrate as soon as you hit the event horizon this is what is called the famous firewall okay and 
to be yeah sc and of course no one has actually ever fallen into a black hole but this 
one of the times where physicists have a strong belief that we have no empirical justification for namely that 
special happens when you cross a black event horizon sa right right and in some sense you could take 
position that just what happens in a black hole stays in a black hole it could be it could 
that like in that movie interstellar that you meet your longlost relative or something right and just like beliefs 
the afterlife this would have no consequences that at least we could publish journal papers about here on earth 
everything is just inside the black hole but physicists i think very understandably have high aspirations they would like 
describe even regions of the universe from which we can never receive a signal and at least classical general 
paints this very nice picture where you sail right past the event horizon and nothing very special seems to 
sa now to be clear you do die after you jump into a black hole but only supposed to 
when you hit the singularity not supposed so supposed to have another second or whatever after crossed the event 
not supposed to die right at the event horizon but this firewall paper was saying from these assumptions it 
that you and this was not just some completely formal question about say the structure of the state space 
i liked about it is what they said here very explicitly is the experiment that would lead to the 
okay fine not an experiment that maybe we could ever practically carry out within the lifetime of the universe 
nevertheless here is the experiment and if you claim to understand this then you have to be able to 
what happens if someone did that experiment right sa and this i would say that this was really the 
thing that brought quantum information ideas into quantum gravity in a really deep way and in particular a year 
my friends daniel harlow and patrick hayden wrote an amazing paper about the firewall paradox where they said it 
be true that if you do this crazy experiment and then try to jump into a black hole to 
what happened that you would experience a but how hard would it be to do that experiment and they 
evidence that to actually do the quantum computation on the hawking radiation that would detect those correlations so detect 
not in completely a thermal state would require a quantum computation that would use a number of steps that 
exponential in the size of the black hole meaning in the number of qubits of the black hole sa 
in other words be talking about a problem that would take your quantum computer not a mere ten to 
sixtyseven years to solve that is by our new standard going to be easy ten to the sixtyseven years 
an easy problem but this would be a hard problem meaning one that takes two to the ten to 
sixtyseven years to solve okay or something like that yeah sc so a very nice example because it takes 
back to the realization postturing that the question is not just the distinction between solvable and unsolvable but how 
it takes to solve things and so once you appreciate that you might have some really strong beliefs in 
but if those beliefs could in principle be violated but only by things that would take way way way 
than the age of the universe to happen maybe not bothered so much and exactly what complexity theory is 
about sa exactly now now this is you know this is somewhat controversial some people said who cares if 
computation takes this huge amount of time merely a practical but as harlow and hayden pointed out one thing 
it means is that you could not have made a dent in this computation before the black hole would 
long ago evaporated anyway sc yeah sa right chuckle which means that then nothing to jump into which means 
maybe then no paradox and yeah you could think about what if you did it for a really really 
black hole for which this exponential scaling but for a really really tiny black hole we really expect classical 
relativity and quantum field theory to work well anyway so i think it is plausible that that sort of 
okay well let me put it this way if someone said okay for there to be a contradiction in 
laws of physics as long as it takes exponential time to discover it i would not agree with that 
would say that sounds like nonsense but not what harlow and hayden were saying they were saying something more 
that there are contradictions in the effective theories that we normally sc the approximate theory sa but that we 
have to ultimately be superseded by a quantum theory of gravity and it might be that some of these 
with effective field theories you would find them not by going to an enormously high energy or to an 
tiny distance but by going to a regime of extreme computational complexity but if it would take an exponential 
to uncover the breakdown of effective field theory then we do have a reason for trusting our effective field 
in sc yeah and i sadly we have time to go into the details but i think that since 
since that watershed moment really been this wonderful importing of all sorts of ideas from quantum information and just 
computer science i know even written papers involving things like quantum circuits and tensor networks and stuff like that 
really really invigorated a mature field i know sa yeah yeah yeah no right lenny susskind became a prophet 
this movement as often a prophet for whatever he believes in at the given moment laughter but i would 
he became far more gung ho than i am about complexity as the future of physics i was the 
saying down i go that sc make a terrible prophet sa but the connection has gone a lot further 
like in this adscft correspondence where you literally use circuit complexity as the thing that is holographically dual to 
geometric quantity like the volume of a wormhole that might be lenny thinks that because circuit complexity really does 
fundamental importance in physics just like entropy or energy not willing to go as far as he does there 
i say that nevertheless it is the best placeholder that anyone can come up with for whatever quantity really 
dual to these volumes of wormholes and things like that sc it is great stuff right there on the 
edge and i think going to have to end because the other topics i wanted to talk about include 
like free will and consciousness and i imagine that we would get anything interesting said in less than an 
each so save that for a future episode sa great sc and let people absorb the complexity and quantumness 
what we already talked about sa awesome if you invite me for a podcast about free will i will 
to participate laughter sc so you say sa alright sc the universe that gets to decide alright scott aaronson 
so much for being on the mindscape podcast sa alright thanks so much sean a pleasure as always music 
shtetloptimized blog archive the us might die but p and pspace are forever the lecture notes are superb for 
well done always interesting i definitely want to hear the podcast where you guys talk about free will and 
that should be really interesting this was one of my all time favorite mindscape podcasts the content was superlative 
particularly enjoyed the interaction between sean and scott sean is a great interviewer backed up with knowledge he knew 
to let scott run and when to reel him in looking forward to the future podcast all of these 
are amazing but this one kicks goals sean bring this guy back your email address will not be published 
fields are marked name email website sean carroll hosts conversations with the worlds most interesting thinkers science society philosophy 
arts and ideas 